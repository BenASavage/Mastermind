package mastermind;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class GUI {

    private Game game;
    private JButton guessButton;
    private JComboBox comboBox1;
    private JComboBox comboBox2;
    private JComboBox comboBox3;
    private JComboBox comboBox4;
    private JPanel boardPanel;
    private JPanel inputPanel;
    private JPanel boxesPanel;
    private JPanel panel1;
    private JPanel guessPanel;
    private JPanel feedbackPanel;

    public static void main(String[] args) {
        JFrame frame = new JFrame("Mastermind");
        frame.setContentPane(new GUI().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(30, 30, 30, 30), 30, 30));
        panel1.setBackground(new java.awt.Color(-1));
        panel1.setForeground(new java.awt.Color(-16777216));
        panel1.setOpaque(true);
        panel1.setPreferredSize(new Dimension(700, 700));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(15, 15, 15, 15), -1, -1));
        panel2.setBackground(new java.awt.Color(-4604738));
        panel2.setOpaque(true);
        panel2.setPreferredSize(new Dimension(700, 700));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        boardPanel = new JPanel();
        boardPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        boardPanel.setBackground(new java.awt.Color(-4275773));
        boardPanel.setOpaque(false);
        panel2.add(boardPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        guessPanel = new JPanel();
        guessPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        guessPanel.setAutoscrolls(false);
        guessPanel.setBackground(new java.awt.Color(-1973791));
        guessPanel.setOpaque(true);
        boardPanel.add(guessPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        feedbackPanel = new JPanel();
        feedbackPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        feedbackPanel.setBackground(new java.awt.Color(-1973791));
        feedbackPanel.setOpaque(true);
        boardPanel.add(feedbackPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        inputPanel = new JPanel();
        inputPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        inputPanel.setBackground(new java.awt.Color(-4604738));
        inputPanel.setOpaque(false);
        panel2.add(inputPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        boxesPanel = new JPanel();
        boxesPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        boxesPanel.setOpaque(false);
        inputPanel.add(boxesPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        comboBox1 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("RED");
        defaultComboBoxModel1.addElement("YELLOW");
        defaultComboBoxModel1.addElement("BLUE");
        defaultComboBoxModel1.addElement("GREEN");
        defaultComboBoxModel1.addElement("WHITE");
        defaultComboBoxModel1.addElement("BLACK");
        comboBox1.setModel(defaultComboBoxModel1);
        boxesPanel.add(comboBox1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox2 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("RED");
        defaultComboBoxModel2.addElement("YELLOW");
        defaultComboBoxModel2.addElement("BLUE");
        defaultComboBoxModel2.addElement("GREEN");
        defaultComboBoxModel2.addElement("WHITE");
        defaultComboBoxModel2.addElement("BLACK");
        comboBox2.setModel(defaultComboBoxModel2);
        boxesPanel.add(comboBox2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox3 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("RED");
        defaultComboBoxModel3.addElement("YELLOW");
        defaultComboBoxModel3.addElement("BLUE");
        defaultComboBoxModel3.addElement("GREEN");
        defaultComboBoxModel3.addElement("WHITE");
        defaultComboBoxModel3.addElement("BLACK");
        comboBox3.setModel(defaultComboBoxModel3);
        boxesPanel.add(comboBox3, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox4 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("RED");
        defaultComboBoxModel4.addElement("YELLOW");
        defaultComboBoxModel4.addElement("BLUE");
        defaultComboBoxModel4.addElement("GREEN");
        defaultComboBoxModel4.addElement("WHITE");
        defaultComboBoxModel4.addElement("BLACK");
        comboBox4.setModel(defaultComboBoxModel4);
        boxesPanel.add(comboBox4, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        guessButton.setText("Guess");
        inputPanel.add(guessButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private void winMessage() {
        String message = "You win! \nThe code was: " + game.getSecretCode() + "\n Would you like to play again?";
        int input = JOptionPane.showConfirmDialog(panel1, message, "You Win!", JOptionPane.YES_NO_OPTION);
        if (input == JOptionPane.YES_OPTION) {
            game.playAgain();
            panel1.updateUI();
        } else {
            System.exit(0);
        }
    }

    private void loseMessage() {
        String message = "You lose. \nThe code was: " + game.getSecretCode() + "\n Would you like to play again?";
        int input = JOptionPane.showConfirmDialog(panel1, message, "You lose.", JOptionPane.YES_NO_OPTION);
        if (input == JOptionPane.YES_OPTION) {
            game.playAgain();
            panel1.updateUI();
        } else {
            System.exit(0);
        }
    }

    private void createUIComponents() {
        game = new Game();

        guessButton = new JButton("Guess");
        guessButton.addActionListener(e -> {
            Color[] colors = new Color[]{Color.valueOf(comboBox1.getSelectedItem().toString()),
                    Color.valueOf(comboBox2.getSelectedItem().toString()),
                    Color.valueOf(comboBox3.getSelectedItem().toString()),
                    Color.valueOf(comboBox4.getSelectedItem().toString())};
            int state = game.input(new Code(colors));

            switch (state) {
                case 1: {
                    winMessage();
                    break;
                }
                case 2: {
                    loseMessage();
                    break;
                }
            }
        });
    }
}
